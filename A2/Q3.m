
%please use script Q3_call.m for executing this function

function [key,counter] = Q3(image,L,show)

figure;
imshow(image)

color_circle=['b' 'g' 'y' 'm' 'r'];%the circle colors for each scale(to draw sift points) 
%the location and level of each sift key point will be stored in this:
key =zeros(1000000,3);
% assign a counter that tracks the actual size of your array 
counter = 0;
%defining a threshold for maxima and minima points
th=5;
L_up= cell([1 5]);%upsampled level of laplacian pyramid
L_down=cell([1 5]);%downsampled level of laplacian pyramid

%cell indexes start from 1 so level 0 has index 1 in pyramid
%to consider level 1 to 5 we should consider indexes of 2 to 6
for d=2:6
    if(d==6) %the fifth level only has one level below 
        %only downsample the below level
        L_down{d}=imresize(L{d-1}, 0.5 ,'nearest');
        [row , column] =size(L{d});

        for i=2:row-1
            for j=2:column-1
                %finding maxima: the difference should
                %be higher than a positive threshold
                 if ((L{d}(i,j)- L{d}(i,j+1))>th && ...
                    (L{d}(i,j)- L{d}(i,j-1))>th && ...
                    (L{d}(i,j)- L{d}(i+1,j))>th && ...
                    (L{d}(i,j)- L{d}(i-1,j))>th && ...
                    (L{d}(i,j)- L{d}(i+1,j+1))>th && ...
                    (L{d}(i,j)- L{d}(i-1,j-1))>th && ...
                    (L{d}(i,j)- L{d}(i+1,j-1))>th && ...
                    (L{d}(i,j)- L{d}(i-1,j+1))>th && ...
                    ... %comparing with above level pixels
                    (L{d}(i,j)- L_down{d}(i,j))>th && ...
                    (L{d}(i,j)- L_down{d}(i,j+1))>th && ...
                    (L{d}(i,j)- L_down{d}(i,j-1))>th && ...
                    (L{d}(i,j)- L_down{d}(i+1,j))>th && ...
                    (L{d}(i,j)- L_down{d}(i-1,j))>th && ...
                    (L{d}(i,j)- L_down{d}(i+1,j+1))>th && ...
                    (L{d}(i,j)- L_down{d}(i-1,j-1))>th && ...
                    (L{d}(i,j)- L_down{d}(i+1,j-1))>th && ...
                    (L{d}(i,j)- L_down{d}(i-1,j+1))>th)
                
                    counter = counter + 1;
                    key(counter,:) = [i j 2^(d-1)]; %appending (x,y,sigma) of extrema to
                    %a matrix of sift key points
                    %showing sift points of different scales with circles
                    %of different colors and sizes
                    viscircles([j*2^(d-1) i*2^(d-1)], 2^(d-1) ,'color',color_circle(d-1))
                    
                %finding minima: the difference should
                %be lower than a negative threshold
                elseif ((L{d}(i,j)- L{d}(i,j+1))<-th && ...
                    (L{d}(i,j)- L{d}(i,j-1))<-th && ...
                    (L{d}(i,j)- L{d}(i+1,j))<-th && ...
                    (L{d}(i,j)- L{d}(i-1,j))<-th && ...
                    (L{d}(i,j)- L{d}(i+1,j+1))<-th && ...
                    (L{d}(i,j)- L{d}(i-1,j-1))<-th && ...
                    (L{d}(i,j)- L{d}(i+1,j-1))<-th && ...
                    (L{d}(i,j)- L{d}(i-1,j+1))<-th && ...
                    ... %comparing with above level pixels
                    (L{d}(i,j)- L_down{d}(i,j))<-th && ...
                    (L{d}(i,j)- L_down{d}(i,j+1))<-th && ...
                    (L{d}(i,j)- L_down{d}(i,j-1))<-th && ...
                    (L{d}(i,j)- L_down{d}(i+1,j))<-th && ...
                    (L{d}(i,j)- L_down{d}(i-1,j))<-th && ...
                    (L{d}(i,j)- L_down{d}(i+1,j+1))<-th && ...
                    (L{d}(i,j)- L_down{d}(i-1,j-1))<-th && ...
                    (L{d}(i,j)- L_down{d}(i+1,j-1))<-th && ...
                    (L{d}(i,j)- L_down{d}(i-1,j+1))<-th)
                
                    counter = counter + 1;
                    key(counter,:) = [i j 2^(d-1)]; %appending (x,y,sigma) of extrema to
                    %a matrix of sift key points
                    %showing sift points of different scales with circles
                    %of different colors and sizes
                    viscircles([j*2^(d-1) i*2^(d-1)], 2^(d-1) ,'color',color_circle(d-1))
                 end
                 
            end
        end
        
    else
        %both upsample and downsample
        L_up{d}=imresize(L{d+1}, 2,'nearest');
        L_down{d}=imresize(L{d-1}, 0.5 ,'nearest');
        [row , column] =size(L{d});
        for i=2:row-1
            for j=2:column-1
                
              %finding maxima
              if ((L{d}(i,j)- L{d}(i,j+1))>th && ...
                (L{d}(i,j)- L{d}(i,j-1))>th && ...
                (L{d}(i,j)- L{d}(i+1,j))>th && ...
                (L{d}(i,j)- L{d}(i-1,j))>th && ...
                (L{d}(i,j)- L{d}(i+1,j+1))>th && ...
                (L{d}(i,j)- L{d}(i-1,j-1))>th && ...
                (L{d}(i,j)- L{d}(i+1,j-1))>th && ...
                (L{d}(i,j)- L{d}(i-1,j+1))>th && ...
                ... %comparing with above level pixels
                (L{d}(i,j)- L_up{d}(i,j))>th && ...
                (L{d}(i,j)- L_up{d}(i,j+1))>th && ...
                (L{d}(i,j)- L_up{d}(i,j-1))>th && ...
                (L{d}(i,j)- L_up{d}(i+1,j))>th && ...
                (L{d}(i,j)- L_up{d}(i-1,j))>th && ...
                (L{d}(i,j)- L_up{d}(i+1,j+1))>th && ...
                (L{d}(i,j)- L_up{d}(i-1,j-1))>th && ...
                (L{d}(i,j)- L_up{d}(i+1,j-1))>th && ...
                (L{d}(i,j)- L_up{d}(i-1,j+1))>th && ...
                ... %comparing with below level pixels
                (L{d}(i,j)- L_down{d}(i,j))>th && ...
                (L{d}(i,j)- L_down{d}(i,j+1))>th && ...
                (L{d}(i,j)- L_down{d}(i,j-1))>th && ...
                (L{d}(i,j)- L_down{d}(i+1,j))>th && ...
                (L{d}(i,j)- L_down{d}(i-1,j))>th && ...
                (L{d}(i,j)- L_down{d}(i+1,j+1))>th && ...
                (L{d}(i,j)- L_down{d}(i-1,j-1))>th && ...
                (L{d}(i,j)- L_down{d}(i+1,j-1))>th && ...
                (L{d}(i,j)- L_down{d}(i-1,j+1))>th)  
                
                counter = counter + 1;
                key(counter,:) = [i j 2^(d-1)]; %appending (x,y,sigma) of extrema to
                %a matrix of sift key points
                viscircles([j*2^(d-1) i*2^(d-1)], 2^(d-1) ,'color',color_circle(d-1))
                
              %finding minima
              elseif ((L{d}(i,j)- L{d}(i,j+1))<-th && ...
                (L{d}(i,j)- L{d}(i,j-1))<-th && ...
                (L{d}(i,j)- L{d}(i+1,j))<-th && ...
                (L{d}(i,j)- L{d}(i-1,j))<-th && ...
                (L{d}(i,j)- L{d}(i+1,j+1))<-th && ...
                (L{d}(i,j)- L{d}(i-1,j-1))<-th && ...
                (L{d}(i,j)- L{d}(i+1,j-1))<-th && ...
                (L{d}(i,j)- L{d}(i-1,j+1))<-th && ...
                ... %comparing with above level pixels
                (L{d}(i,j)- L_up{d}(i,j))<-th && ...
                (L{d}(i,j)- L_up{d}(i,j+1))<-th && ...
                (L{d}(i,j)- L_up{d}(i,j-1))<-th && ...
                (L{d}(i,j)- L_up{d}(i+1,j))<-th && ...
                (L{d}(i,j)- L_up{d}(i-1,j))<-th && ...
                (L{d}(i,j)- L_up{d}(i+1,j+1))<-th && ...
                (L{d}(i,j)- L_up{d}(i-1,j-1))<-th && ...
                (L{d}(i,j)- L_up{d}(i+1,j-1))<-th && ...
                (L{d}(i,j)- L_up{d}(i-1,j+1))<-th && ...
                ... %comparing with below level pixels
                (L{d}(i,j)- L_down{d}(i,j))<-th && ...
                (L{d}(i,j)- L_down{d}(i,j+1))<-th && ...
                (L{d}(i,j)- L_down{d}(i,j-1))<-th && ...
                (L{d}(i,j)- L_down{d}(i+1,j))<-th && ...
                (L{d}(i,j)- L_down{d}(i-1,j))<-th && ...
                (L{d}(i,j)- L_down{d}(i+1,j+1))<-th && ...
                (L{d}(i,j)- L_down{d}(i-1,j-1))<-th && ...
                (L{d}(i,j)- L_down{d}(i+1,j-1))<-th && ...
                (L{d}(i,j)- L_down{d}(i-1,j+1))<-th)  
                
                counter = counter + 1;
                key(counter,:) = [i j 2^(d-1)]; %appending (x,y,sigma) of extrema to
                %a matrix of sift key points
                viscircles([j*2^(d-1) i*2^(d-1)], 2^(d-1) ,'color',color_circle(d-1))
                
               end                
               
            end
        end
    end
end
key = key(1:counter,:);%the rest of the indexes (after counter) are zero

counter %number of extracted sift key points
end

